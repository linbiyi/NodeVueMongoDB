用户 > 表空间(tablespaces 数据库) > 表(table table_name) > 字段(column 域 列 column_name) > 数据(字符, 数值, 日期, 其他)

dba_tables: 系统所有的表信息, 需要DBA权限才能查询
all_tables: 当前用户有权限的表信息（要某表任何权限即视图看表相关信息）
user_tables: 当前用户名下的表信息
like: %a%  包含匹配,包含a的都算
comment on table is "msg";  添加表注释
comment on column table.id is "idmsg";  添加字段注释 


oracle自带插件
1) SQL PLus: oracle自带的字符操作界面,用于操作数据库
2) Database Control: 用于打开oracle的企业管理工具

oracle系统用户
权限级别：sys > system > sysman > scott
sys: 必须使用 管理员/系统操作员 身份登陆
system: 可以直接登陆
sysman: 用于操作企业管理器
scott: 默认密码tiger
前三者密码自定义

表空间: 用来放数据库表对象的空间
	1) 永久表空间: 视图，表，存储过程
	2) 临时表空间: 数据库中间执行的过程
	3) UNDO表空间：被修改之前的数据(备份,可以让数据库回滚等操作)
	
数据类型：
	字符型：
		char(n): 最大长度2000, 固定长度, 会自动补齐长度
		nchar(n): 最大长度1000, 固定长度, 会自动补齐长度, unicode格式, 常用于存储汉字
		varchar2(n): 最大长度4000, 长度不固定, 常用于存储字符串
		nvarchar2(n): 最大长度2000,, unicode格式
	数值型：
		number(p,s): p有效数字,s小数点后的位数, 例： number(5,2)  123.23
		float(n): 不常用
	日期：
		date: 精确 到秒
		timestamp: 精确到 0.1秒, 不常用(时间戳)
	其他类型：
		blob: 二进制(最大存储4GB)
		clob: 字符型(最大存储4GB)
	
		

oracle命令
1) 用户登陆：
	system/密码
	connect sys/密码 as sysdba
2) 查看当前登陆用户
	show user
3) 用户的数据字典
    desc dba_users
4) 查看所有的用户信息
	select username from dba_users;
5) 用户的解锁和锁定
	alter user username account unlock; 解锁
	alter user username account lock;	锁定
6) desc dba_tablespaces		系统管理员查看的数据字典
   desc user_tablespaces	普通用户查看的数据字典
	select tablespace_name from dba_tablespaces;    查看表空间的名字(管理员登陆时默认的6中表空间)
	select tablespace_name from user_tablespaces;   查看表空间的名字
		system：系统表空间,存放系统信息
		sysaux:
		undotbs1: UNDO表空间 存储备份数据
		temp: 临时表空间 存储索引信息
		users: 存储数据库用户创建的数据库对象
		example: 辅助表空间,安装oracle11g示例

操作表

1） 创建一个表useinfo
	create table userinfo 
	( id number(6,0),
	username varchar2(20),
	userpwd varchar2(20),
	email varchar2(30),
	regdate date);	
2） 查看表
	查看某个表空间里面的表名： select table_name,tablespace_name from dba_tables where tablespace_name='大写的表空间';
	查看某个表的具体信息： desc table_name
3） 修改表(修改的是表的结构,非表中的数据)
	1.添加字段：alter table table_name
		   add column_name datatype;
	  例：alter table userinfo
	      add remarks varchar2(500);
	2.更改字段数据类型：alter table table_name
		           modify column_name datatype;
	  例: 修改字段的数据类型的长度： alter table userinfo
	                             modify remarks varchar2(400); 
	      修改字段的数据类型：alter table userinfo
	                        modify userpwd number(6,0);
	3.删除字段：alter table table_name
	           drop column column_name;
	  例: alter table userinfo 
	      drop column remarks;
	4.修改字段名：alter table table_name
	             rename column column_name to new_column_name;
	  例：alter table userinfo
	      rename column email to phone;
	5.修改表名：rename table_name to new_table_name;
	  例：rename userinfo to new_userinfo;
4) 删除表
	1) 截断表,清空表内数据   truncate table new_userinfo;
	2) 删除整个表    drop table new_userinfo;
	
操作数据

1）添加数据 insert into table_name (column1,column2, ...) 
           values(value1,value2, ...)
   向所有字段添加值 insert into userinfo 
                   values(1, 'xxx', '123', 'xxx@126.com', sysdate);     sysdate为当前的日期
   向指定字段添加值 insert into userinfo(id, username, userpwd)
                   values(2, 'yyy', '123');
   给指定字段添加默认值 creat table userinfo1
                      (id number(6,0),
		      regdate date default sysdate); 		(添加了默认日期)
		      
		      insert init userinfo1(id)
		      values(1)
   给指定字段添加默认值 alter table userinfo
                      modify email default '无';     (修改了默认email为无)
		      
		      insert init userinfo(id)
		      values(3);
2）复制数据
   在建表时复制 create table new_table
               as
	       select column1,...|* from old_table
   在添加时复制 insert into new_table
               (column1,...)
	       select column1,...|* from old_table
3) 修改数据
   update table_name
   set column=value,...
   [where conditions]
4) 删除数据
   delete from table_name
   [where conditions]
	
	
约束：定义规则
	1.非空约束: 所约束的列不能为NULL值。否则就会报错
	NOT NULL
		例:
		创建表时添加非空约束：
		   create table userinfo_1
		   (id number(6,0),
		   username varchar2(20) not null,
		   userpwd varchar2(20) not null);
		修改时增加非空约束
		   alter table userinfo
		   modify username varchar2(20) not null;
		去除非空约束:
		   alter table userinfo
		   modify username varchar2(20) null;
		   
	2.主键约束：唯一的标识表中的每一行，不能重复，不能为空。 创建主键或唯一约束后，ORACLE会自动创建一个与约束同名的索引（UNIQUENES为UNIQUE唯一索引）。
				需要注意的是：每个表只能有且有一个主键约束。
		例：
		在字段后添加约束：
		   create table userinfo_1
		   (id number(6,0) primary key,
		   username varchar2(20),
		   userpwd varchar2(20); 
		表创建完添加约束：
		   create table userinfo_1
		   (id number(6,0),
		   username varchar2(20),
		   userpwd varchar2(20),
		   constraint userinfo_id_username primary key(id,username));
		   
	
	3.外键约束：用来约束两个表中列之间的关系。用来维护从表（Child Table）和主表（Parent Table）之间的引用完整性. 外键约束是个有争议性的约束，它一方面能够维护数据库的数据一致性，
				数据的完整性。防止错误的垃圾数据入库； 另外一方面它会增加表插入、更新等SQL性能的额外开销，不少系统里面通过业务逻辑控制来取消外键约束。
				例如在数据仓库中，就推荐禁用外键约束。
	
	4.唯一约束：在表中每一行中所定义的这列或这些列的值都不能相同。必须保证唯一性。否则就会违法约束条件。
	
	5.检查(条件)约束：用来约束表中列的输入值得范围，比如在输入性别时，要求数据库中只能输入男或者女，就可以使用检查约束来约束该列。表中每行都要满足该约束条件。
				条件约束既可以在表一级定义也可以在列一级定义。在一列上可以定义任意多个条件约束。
				
				
				
oracle查询语句
	1.查询指定名称为ABC的表
		select * from user_tables where table_name='ABC';
	  当前用户下的表
		select * from user_tables;
	  有权限查询的表
	    select * from all_tables;
	  如果有dba权限,可查询数据库所有表
	    select * from dba_tables;
	  查询空数据的表	
		select * from all_all_tables where num_rows=0 and owner =XXXX;
	
	2.查询某张表中约束的名字
		select constraint_name from user_constraints where table_name='userinfo';
		
	3.基本查询语句
		select [distinct] column_name1,...|* 
		from table_name 
		[where conditions]
	
		

	  
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
		
